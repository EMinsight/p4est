/*
  This file is part of p4est.
  p4est is a C library to manage a collection (a forest) of multiple
  connected adaptive quadtrees or octrees in parallel.

  Copyright (C) 2010 The University of Texas System
  Written by Carsten Burstedde, Lucas C. Wilcox, and Tobin Isaac

  p4est is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  p4est is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with p4est; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
*/

/** \page search The search routines
 *
 * An overview of the local and distributed search routines of \ref p4est_search.h .
 *
 * ## The basic idea
 * During mesh-based simulations it may be necessary to match multiple
 * user-defined queries with leaves of the forest. Next to a volume iteration
 * over all leaves using \ref p4est_iterate, p4est also offers several functions
 * for depth-first, top-down tree traversal of multiple points at once in
 * \ref p4est_search.h, which allow to efficiently exclude large regions from
 * the search early on.
 * \ref p4est_search_local searches a set of user-defined query points in the
 * local part of the forest. \ref p4est_search_partition searches query points
 * in the forests partition and assigns them to processes. It can be used to
 * organize a parallel search of distributed sets of queries of unrelated
 * partition.
 *
 */

 /** \example spheres/spheres2.c
 *
 * This 2D example program randomly generates parallel distributed sets of 2D
 * sphere shells and refines all quadrants of a 2D forest intersecting any of the
 * cells.\n 
 *
 * The sphere shells are entered as query objects into a partition search, which
 * assigns them to all their intersecting processes. Subsequently, the processes
 * are informed about incoming messages using a notify allgorithm. Then the
 * sphere shells are sent using non-blocking point-to-point communication.
 * The receiving processes enter the sphere shells into a local search.
 * When any sphere intersects a leaf quadrant, the quadrant is marked for
 * refinement. The refined forest gets repartitioned before entering the next
 * iteration of adaptive refinement.
 * During the searches there are two tests to decide if a sphere shell
 * intersects a quadrant. On leaf level an exact test is performed. On higher
 * levels an approximate test compares the distance of the sphere center and the
 * quadrant center with their radii to determine, if an intersection is possible.
 *
 * Usage:
 *    > `p4est_spheres `
 * with the following options:
 * \verbatim
 *    -l | --minlevel  <INT>       Lowest level
 *    -L | --maxlevel  <INT>       Highest level
 *    -r | --rmax      <REAL>      Max sphere radius
 *    -t | --thickness <REAL>      Relative sphere thickness
 *    -f | --lfraction <REAL>      Length density of spheres
 *    -s | --spherelems <REAL>     Min elements per sphere diameter
 *    -N | --nbottom   <INT>       Notify bottom multiplicator
 *    -A | --alltoall  <BOOLEAN> Notify alltoall implementation
 *    -S | --scaling   <BOOLEAN> Configure for scaling test
 *    -R | --repetitions <INT>     Repeat run multiple times
 *    -V | --write-vtk <BOOLEAN> Output VTK files
 *    -P | --prefix    <STRING>    Prefix for file output \endverbatim
 */

 /** \example spheres/spheres3.c
 *
 * This 3D example program randomly generates parallel distributed sets of 3D
 * sphere shells and refines all quadrants of a 3D forest intersecting any of the
 * cells.\n 
 *
 * The sphere shells are entered as query objects into a partition search, which
 * assigns them to all their intersecting processes. Subsequently, the processes
 * are informed about incoming messages using a notify allgorithm. Then the
 * sphere shells are sent using non-blocking point-to-point communication.
 * The receiving processes enter the sphere shells into a local search.
 * When any sphere intersects a leaf quadrant, the quadrant is marked for
 * refinement. The refined forest gets repartitioned before entering the next
 * iteration of adaptive refinement.
 * During the searches there are two tests to decide if a sphere shell
 * intersects a quadrant. On leaf level an exact test is performed. On higher
 * levels an approximate test compares the distance of the sphere center and the
 * quadrant center with their radii to determine, if an intersection is possible.
 *
 * Usage:
 *    > `p8est_spheres `
 * with the following options:
 * \verbatim
 *    -l | --minlevel  <INT>       Lowest level
 *    -L | --maxlevel  <INT>       Highest level
 *    -r | --rmax      <REAL>      Max sphere radius
 *    -t | --thickness <REAL>      Relative sphere thickness
 *    -f | --lfraction <REAL>      Length density of spheres
 *    -s | --spherelems <REAL>     Min elements per sphere diameter
 *    -N | --nbottom   <INT>       Notify bottom multiplicator
 *    -A | --alltoall  <BOOLEAN> Notify alltoall implementation
 *    -S | --scaling   <BOOLEAN> Configure for scaling test
 *    -R | --repetitions <INT>     Repeat run multiple times
 *    -V | --write-vtk <BOOLEAN> Output VTK files
 *    -P | --prefix    <STRING>    Prefix for file output \endverbatim
 */